
:host {
   display: grid;
   grid-template:
      "content     content content  content      content" 1fr
      "seek        seek    seek     seek         seek"
      "left-gutter time    controls right-gutter right-gutter"
      /
      1fr 10ch auto 10ch 1fr
   ;
   
   /* Guide the aspect ratio of the video player. */
   --aspect-ratio: auto;
   
   --focus-border-image: url(focus-border-image.svg) 4 3 3 4/auto repeat;
   --focus-outline:      none;
   
   --min-video-width:  0;
   --min-video-height: 0;
   --max-video-width:  100%;
   --max-video-height: none;
   
   /* Scale the player UI. */
   --scale: 1;
}

:host(.theater) {
   .content {
      grid-row: 1 / span 100;
   }
   .seek {
      margin-left: calc(12px * var(--scale,1));
      margin-right: calc(12px * var(--scale,1));
   }
   .controls {
      border: 0 solid transparent;
      border-width: calc(8px * var(--scale,1)) 0;
      
      --background: #FFFFFF60;
   }
}

/*
   General element styles:
*/

wm-slider {
   position: relative;
   &:focus-visible {
      outline: none;
      &::before {
         position: absolute;
         content: " ";
         inset:   0;
         z-index: 20;
         border-image: var(--focus-border-image, none);
         border-image-outset: 3px;
         outline:      var(--focus-outline);
      }
   }
}

/*
   Layout
*/

.content {
   grid-area:  content;
   max-width:  100%;
   min-height: 0px; /* allow this grid region to shrink if the player container shrinks */
   
   background: #000;
   
   display: grid;
   grid-template: "video";
   justify-items: center;
   align-items: center;
}
video {
   min-width:  var(--min-video-width, 0);
   min-height: var(--min-video-height, 0);
   max-width:  var(--max-video-width, 100%);
   max-height: var(--max-video-height, none);
   
   aspect-ratio: var(--aspect-ratio, auto);
   object-fit:   contain;
   
   /* ensure we shrink to fit the player when necessary */
   width:  100%;
   height: 100%;
}

.seek {
   grid-area: seek;
   margin: calc(2px * var(--scale,1)) 0;
}
:host(:state(buffering)) .seek {
   --fill-gradient: linear-gradient(to bottom, #a7c2d3, #3c587f, #90a7c5);
}
:host(:state(stalled)) .seek {
   --fill-gradient: linear-gradient(to bottom, #e2adad, #933434, #d28080);
}

.current-time {
   grid-area:  time;
   align-self: center;
   padding-right: .3em;
   
   text-align: right;
   
   font-family: "Segoe UI", Arial, sans-serif;
   color: #000;
   -webkit-text-stroke: 4px #FFF; /* TODO: this is for a light background only */
   paint-order: stroke fill;
   
   user-select: none;
}
:host(.theater) .current-time {
   color: #FFF;
   -webkit-text-stroke: 4px #000A;
}

.controls {
   --background: transparent;
   
   --padding: calc(5px * var(--scale,1));
   --height:  calc(23px * var(--scale,1));
   
   --base-widget-gap: calc(6px * var(--scale,1));
   --endcap-padding:  calc(18px * var(--scale,1));
   
   --border-thickness: calc(1px * var(--scale,1));
   
   --play-pause-button-region: calc(50px * var(--scale,1));
   --play-pause-button-hitbox: calc(43px * var(--scale,1));
   
   --extra-height: calc(var(--play-pause-button-hitbox) + (var(--padding) + var(--border-thickness)) * 2);
   --extra-diff:   calc((var(--extra-height) - var(--height)) / 2);
   
   /*
      Setting border-radius to 50% creates an ellipse, whereas what we want 
      is a capsule. Setting an arbitrary huge value gives us a capsule.
   */
   --really-huge-value: 800px;
   
   grid-area: controls;
   
   display: grid;
   grid-template: "left play right" var(--height) / min-content var(--play-pause-button-hitbox) min-content;
   justify-content: center;
   align-items: center;
   
   margin: var(--extra-diff) 0;
   
   /*
      We want an outline wrapping the player controls, hugging them tightly: 
      think of a horizontal capsule where, at the center, it bulges in a 
      circular shape around the play/pause button.
      
      The easiest way to do this is:
      
       - Split the controls around the play/pause button into "left" and 
         "right" halves.
         
       - Put borders on those halves.
       
       - Overlay the play/pause button with a circular element that has a 
         border, and use clip paths to slice off the middle portions.
   */
   & .left,
   & .right {
      display:   flex;
      flex-flow: row nowrap;
      justify-content: center;
      align-items: center;
      gap: var(--base-widget-gap);
      
      padding: var(--padding) 0;
      height:  var(--height);
      
      border: var(--border-thickness) solid #A8A8A9;
      border-top-color: #A8A8A9;
      border-bottom-color: #CECDCF;
      border-radius: var(--really-huge-value);
      
      background: var(--background);
   }
   & .left {
      grid-area: left;
      padding-left: calc(var(--endcap-padding) + 4px*var(--scale,1));
      padding-right: calc(3px * var(--scale,1));
      border-radius: var(--really-huge-value) 0 0 var(--really-huge-value);
      border-right-width: 0;
   }
   & .right {
      grid-area: right;
      padding-right: var(--endcap-padding);
      padding-left: calc(3px * var(--scale,1));
      border-radius: 0 var(--really-huge-value) var(--really-huge-value) 0;
      border-left-width: 0;
   }
   &::before {
      content: " ";
      grid-area: play;
      justify-self: center;
      pointer-events: none;
      
      --extent:       calc(var(--play-pause-button-hitbox) + (var(--padding) + var(--border-thickness))*2);
      --area-to-show: calc(11px * var(--scale,1));
      
      width:   var(--play-pause-button-hitbox);
      height:  var(--play-pause-button-hitbox);
      padding: var(--padding);
      
      border: var(--border-thickness) solid #A8A8A9;
      border-top-color: #A8A8A9;
      border-bottom-color: #CECDCF;
      border-radius: 50%;
      
      background: var(--background);
      
      mask:
         linear-gradient(
            to bottom,
            #FFF 0px,
            #FFF var(--area-to-show),
            #000 var(--area-to-show),
            #000 calc(var(--extent) - var(--area-to-show)),
            #FFF calc(var(--extent) - var(--area-to-show)),
            #FFF var(--extent)
         ) luminance 0 0/var(--extent) var(--extent) no-repeat,
         linear-gradient(
            to bottom,
            #FFF 0%,
            #FFF 100%
         ) luminance calc(var(--padding) + 1px*var(--scale,1)) calc(5px*var(--scale,1))/var(--play-pause-button-hitbox) calc(39px*var(--scale,1)) no-repeat
      ;
   }
}

.controls hr {
   width:  0;
   height: 100%;
   margin: 0 .25em;
   border: 0 solid #CECDCF;
   border-left-width: 1px;
   border-right-width: 1px;
}

/*
   The play/pause button separates its hitbox from its visuals using the same 
   tricks as the "previous" and "next" buttons.
*/
.play-pause {
   grid-area: play;
   justify-self: center;
}

.volume {
   width: calc(67px * var(--scale,1));
   height: calc(30px * var(--scale,1));
   margin-left: calc(4px * var(--scale,1));
}