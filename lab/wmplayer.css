
:host {
   display: grid;
   grid-template:
      "content     content content  content      content" 1fr
      "seek        seek    seek     seek         seek"
      "left-gutter time    controls right-gutter right-gutter" var(--tray-height, auto)
      /
      1fr 10ch auto 10ch 1fr
   ;
   
   /* Guide the aspect ratio of the video player. */
   --aspect-ratio: auto;
   
   --focus-border-image: url(focus-border-image.svg) 4 3 3 4/auto repeat;
   --focus-outline:      none;
   
   --min-video-width:  0;
   --min-video-height: 0;
   --max-video-width:  100%;
   --max-video-height: none;
   
   /* Scale the player UI. */
   --scale: 1;
}

:host([data-overlay-controls]) {
   .content {
      grid-row: 1 / span 100;
   }
   .seek {
      margin-left: calc(12px * var(--scale,1));
      margin-right: calc(12px * var(--scale,1));
   }
   .controls {
      border: 0 solid transparent;
      border-width: calc(8px * var(--scale,1)) 0;
      
      --background: #FFFFFF60;
   }
}

/* WMP11-on-XP dark theme */
:host([data-theme="dark" i]:not([data-overlay-controls])) {
   --tray-background-height: calc(69px*var(--scale,1));
   --tray-height: calc((69px - 11px) * var(--scale,1));
   
   /* background */
   &::after {
      content: " ";
      grid-row: 2 / span 2;
      grid-column: 1 / span 5;
      order: -2;
      z-index: -2;
      
      background:
         url(spritesheet-tray-background-dark.svg#middle) left top/1px var(--tray-background-height) repeat-x
      ;
   }
   
   .seek {
      padding-top:  calc(5px*var(--scale,1));
      margin-left:  calc(5px*var(--scale,1));
      margin-right: calc(5px*var(--scale,1));
      
      --track-border-color-upper: #444b5e;
      --track-border-color-lower: #656e86;
   }
   .current-time {
      color: #FFF;
      -webkit-text-stroke: 0px;
      margin-top: -.25em; /* fixes vertical align (TODO: find a cleaner way) */
   }
   
   .controls {
      position: relative;
   }
   .controls::after {
      --endcap-outset: calc(-99px * var(--scale,1));
      --endcap-border-width: calc(110px * var(--scale,1));
      
      content: " ";
      position: absolute;
      z-index:  -1;
      top:   calc(-29px*var(--scale,1));
      left:  var(--endcap-outset);
      right: var(--endcap-outset);
      height: var(--tray-background-height);
      border-image:
         url(spritesheet-tray-background-dark.svg)
         69 110 0 110 / var(--tray-background-height) var(--endcap-border-width) 0 var(--endcap-border-width)
         stretch space
      ;
   }
}

/*
   General element styles:
*/

wm-slider {
   position: relative;
   /*&:focus-visible {
      outline: none;
      &::before {
         position: absolute;
         content: " ";
         inset:   0;
         z-index: 20;
         border-image: var(--focus-border-image, none);
         border-image-outset: 3px;
         outline:      var(--focus-outline);
      }
   }*/
}

/*
   Layout
*/

.content {
   grid-area:  content;
   max-width:  100%;
   min-height: 0px; /* allow this grid region to shrink if the player container shrinks */
   
   background: #000;
   
   display: grid;
   grid-template: "video";
   justify-items: center;
   align-items: center;
}
video {
   min-width:  var(--min-video-width, 0);
   min-height: var(--min-video-height, 0);
   max-width:  var(--max-video-width, 100%);
   max-height: var(--max-video-height, none);
   
   aspect-ratio: var(--aspect-ratio, auto);
   object-fit:   contain;
   
   /* ensure we shrink to fit the player when necessary */
   width:  100%;
   height: 100%;
}

.seek {
   grid-area: seek;
   margin: calc(2px * var(--scale,1)) 0;
}
:host(:state(buffering)) .seek {
   --fill-gradient: linear-gradient(to bottom, #a7c2d3, #3c587f, #90a7c5);
}
:host(:state(stalled)) .seek {
   --fill-gradient: linear-gradient(to bottom, #e2adad, #933434, #d28080);
}

.current-time {
   grid-area:  time;
   align-self: center;
   padding-right: .3em;
   
   text-align: right;
   
   font-family: "Segoe UI", Arial, sans-serif;
   color: #000;
   -webkit-text-stroke: 4px #FFF; /* TODO: this is for a light background only */
   paint-order: stroke fill;
   
   user-select: none;
}
:host([data-overlay-controls]) .current-time {
   color: #FFF;
   -webkit-text-stroke: 4px #000A;
}

.controls {
   grid-area: controls;
   
   --height:          calc(23px * var(--scale,1));
   --base-widget-gap: calc( 6px * var(--scale,1));
   
   /* TODO: find a way to get rid of these vars */
   --play-pause-button-region: calc(50px * var(--scale,1));
   --play-pause-button-hitbox: calc(43px * var(--scale,1));
   --extra-height: var(--play-pause-button-hitbox);
   --extra-diff:   calc((var(--extra-height) - var(--height)) / 2);
   
   --play-pause-flex-area-width: var(--play-pause-button-hitbox);
   
   display: grid;
   grid-template:
      "left play right" var(--height)
      /
      min-content var(--play-pause-flex-area-width) min-content
   ;
   justify-content: center;
   align-items:     center;
   
   margin: var(--extra-diff) 0;
   
   .left {
      grid-area: left;
   }
   .right {
      grid-area: right;
   }
   .play-pause {
      grid-area: play;
   }
   
   .left,
   .right {
      display:         flex;
      flex-flow:       row nowrap;
      justify-content: center;
      align-items:     center;
      gap:             var(--base-widget-gap);
      
      height: var(--height);
   }
}

:host([data-overlay-controls]) .controls {
   
   --height:  calc(64px * var(--scale,1) / (2 * 0.96));
   --padding: 4px;
   
   --tray-spritesheet:            url(spritesheet-tray-background-overlay-2.svg);
   --tray-spritesheet-w-unitless: 70;
   --tray-spritesheet-w:          calc(1px * var(--tray-spritesheet-w-unitless));
   --tray-spritesheet-h:          292px;
   --tray-spritesheet-scale:      calc(2 * 0.96);
   
   --tray-endcap-sprite-w: 32px;
   --tray-endcap-sprite-h: 64px;
   
   --tray-middle-sprite-y: calc(var(--tray-endcap-sprite-h) * 2);
   --tray-middle-sprite-h: 64px;
   
   --tray-bulge-sprite-y: 196px;
   --tray-bulge-sprite-w: 68.818px;
   --tray-bulge-sprite-h: 96px;
   
   --tray-spritesheet-effective-scale: calc(var(--scale,1) / var(--tray-spritesheet-scale));
   --tray-spritesheet-effective-scale: calc(
      round(var(--tray-spritesheet-w-unitless) * var(--scale,1) / var(--tray-spritesheet-scale))
      /
      var(--tray-spritesheet-w-unitless)
   );
   --tray-spritesheet-effective-size:
      calc(var(--tray-spritesheet-w) * var(--tray-spritesheet-effective-scale))
      calc(var(--tray-spritesheet-h) * var(--tray-spritesheet-effective-scale))
   ;
   
   --play-pause-flex-area-width: calc(var(--tray-bulge-sprite-w) * var(--tray-spritesheet-effective-scale));
   
   .left,
   .right {
      --tray-endcap-effective-w: calc(var(--tray-endcap-sprite-w) * var(--tray-spritesheet-effective-scale));
      --tray-endcap-effective-h: calc(var(--tray-endcap-sprite-h) * var(--tray-spritesheet-effective-scale));
      
      /*
         Ensure the backgrounds on these elements (the right half in particular) 
         don't partially overlap and cover the play/pause button.
      */
      order: -1;
      
      box-sizing: border-box;
      padding: var(--padding) 0; /* spacing between prev/next and play/pause */
      background:
         var(--tray-spritesheet)
         left calc(-1 * var(--tray-middle-sprite-y) * var(--tray-spritesheet-effective-scale))
         /
         var(--tray-spritesheet-effective-size)
         repeat-x
         padding-box padding-box
      ;
      
      /*
         The original plan was to use two background images: one for the endcap and 
         one for the middle portion. Unfortunately, in both Firefox and Chrome, that 
         produces sub-pixel rounding errors and visible seams.
         
         If we position the endcaps via the box model, i.e. using a pseudo-element, 
         then things seem to render just fine... mostly. Firefox gets sub-pixel gaps 
         at some zoom levels if the background on the pseudo-element is *just* the 
         endcap.
      */
      position: relative;
      &::before {
         content:  " ";
         display:  block;
         width:    var(--tray-endcap-effective-w);
         position: absolute;
         top:      0;
         bottom:   0;
         right:    100%;
         background:
            var(--tray-spritesheet)
            var(--endcap-position-x) var(--endcap-position-y)
            /
            var(--tray-spritesheet-effective-size)
            no-repeat
            border-box border-box
         ;
      }
      &.right::before {
         right: auto;
         left:  100%;
      }
   }
   .left {
      --endcap-position-x: 0;
      --endcap-position-y: 0;
      border-left:   var(--tray-endcap-effective-w) solid transparent;
      padding-right: var(--padding);
   }
   .right {
      --endcap-position-x: right;
      --endcap-position-y: calc(-1 * var(--tray-endcap-effective-h));
      border-right: var(--tray-endcap-effective-w) solid transparent;
      padding-left: var(--padding);
   }
   
   &::before {
      --tray-bulge-effective-w: calc(var(--tray-bulge-sprite-w) * var(--tray-spritesheet-effective-scale));
      --tray-bulge-effective-h: calc(var(--tray-bulge-sprite-h) * var(--tray-spritesheet-effective-scale));
      
      grid-area: play;
      justify-self: center;
      align-self: center;
      
      content: " ";
      width:   var(--tray-bulge-effective-w);
      height:  var(--tray-bulge-effective-h);
      background:
         var(--tray-spritesheet)
         left calc(-1 * var(--tray-bulge-sprite-y) * var(--tray-spritesheet-effective-scale))
         /
         var(--tray-spritesheet-effective-size)
         no-repeat
      ;
   }
}
:host(:not([data-overlay-controls])) .controls {
   --background: transparent;
   
   --padding: calc(5px * var(--scale,1));
   
   --endcap-padding:  calc(18px * var(--scale,1));
   
   --border-thickness: calc(1px * var(--scale,1));
   
   --extra-height: calc(var(--play-pause-button-hitbox) + (var(--padding) + var(--border-thickness)) * 2);
   
   /*
      Setting border-radius to 50% creates an ellipse, whereas what we want 
      is a capsule. Setting an arbitrary huge value gives us a capsule.
   */
   --really-huge-value: 800px;
   
   /*
      We want an outline wrapping the player controls, hugging them tightly: 
      think of a horizontal capsule where, at the center, it bulges in a 
      circular shape around the play/pause button.
      
      The easiest way to do this is:
      
       - Split the controls around the play/pause button into "left" and 
         "right" halves.
         
       - Put borders on those halves.
       
       - Overlay the play/pause button with a circular element that has a 
         border, and use clip paths to slice off the middle portions.
   */
   & .left,
   & .right {
      padding: var(--padding) 0;
      
      border: var(--border-thickness) solid #A8A8A9;
      border-top-color: #A8A8A9;
      border-bottom-color: #CECDCF;
      border-radius: var(--really-huge-value);
      
      background: var(--background);
   }
   & .left {
      padding-left: calc(var(--endcap-padding) + 4px*var(--scale,1));
      padding-right: calc(3px * var(--scale,1));
      border-radius: var(--really-huge-value) 0 0 var(--really-huge-value);
      border-right-width: 0;
   }
   & .right {
      padding-right: var(--endcap-padding);
      padding-left: calc(3px * var(--scale,1));
      border-radius: 0 var(--really-huge-value) var(--really-huge-value) 0;
      border-left-width: 0;
   }
   &::before {
      content: " ";
      grid-area: play;
      justify-self: center;
      pointer-events: none;
      
      --extent:       calc(var(--play-pause-button-hitbox) + (var(--padding) + var(--border-thickness))*2);
      --area-to-show: calc(11px * var(--scale,1));
      
      width:   var(--play-pause-button-hitbox);
      height:  var(--play-pause-button-hitbox);
      padding: var(--padding);
      
      border: var(--border-thickness) solid #A8A8A9;
      border-top-color: #A8A8A9;
      border-bottom-color: #CECDCF;
      border-radius: 50%;
      
      background: var(--background);
      
      mask:
         linear-gradient(
            to bottom,
            #FFF 0px,
            #FFF var(--area-to-show),
            #000 var(--area-to-show),
            #000 calc(var(--extent) - var(--area-to-show)),
            #FFF calc(var(--extent) - var(--area-to-show)),
            #FFF var(--extent)
         ) luminance 0 0/var(--extent) var(--extent) no-repeat,
         linear-gradient(
            to bottom,
            #FFF 0%,
            #FFF 100%
         ) luminance calc(var(--padding) + 1px*var(--scale,1)) calc(5px*var(--scale,1))/var(--play-pause-button-hitbox) calc(39px*var(--scale,1)) no-repeat
      ;
   }
}

.controls hr {
   width:  0;
   height: 100%;
   margin: 0 .25em;
   border: 0 solid #CECDCF;
   border-left-width: 1px;
   border-right-width: 1px;
}

/*
   The play/pause button separates its hitbox from its visuals using the same 
   tricks as the "previous" and "next" buttons.
*/
.play-pause {
   grid-area: play;
   justify-self: center;
}

.volume {
   width: calc(67px * var(--scale,1));
   height: calc(30px * var(--scale,1));
   margin-left: calc(4px * var(--scale,1));
}