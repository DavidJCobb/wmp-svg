
svg[hidden] {
   display: none;
   
   &:has(defs filter) {
      display: initial;
      width:    0px;
      height:   0px;
      position: absolute;
   }
}

.view {
   display: grid;
   grid-template: "header" "area" / auto;
   
   border:  1px solid #000;
   padding: 8px;
   --checkerboard-color-a: #888;
   --checkerboard-color-b: #444;

   background-image: conic-gradient(
      var(--checkerboard-color-a) 0deg,
      var(--checkerboard-color-a) 90deg,
      var(--checkerboard-color-b) 90deg,
      var(--checkerboard-color-b) 180deg,
      var(--checkerboard-color-a) 180deg,
      var(--checkerboard-color-a) 270deg,
      var(--checkerboard-color-b) 270deg
   ) !important;
   background-size: 16px 16px;
   
   >header {
      grid-area: header;
      background: #FFF;
      font-weight: bold;
      padding: .25em .5em;
   }
   
   >.layer {
      grid-area: area;
      position:  relative;
   
      width:  364px;
      height: 102px;
      
      &.raster img {
         image-rendering: pixelated;
      }
   }
   
   /* specific views */
   
   & {
      .layer.raster {
         clip-path: xywh(0 0 var(--raster-x, 0px) 100%);
      }
      .layer.vector {
         clip-path: xywh(var(--raster-x, 0px) 0 100% 100%);
         /*background: inherit;*/
      }
   }
   
   &.active {
      button {
         appearance: none;
         color:   transparent;
         border:  0;
         padding: 0;
         margin:  0;
         background-color: transparent;
         
         position: absolute;
         
         /*
            use a pseudo-element for the actual visuals so that we can control 
            the clickable hitbox via pointer-events and friends.
            
            in some cases, we'll want to use `pointer-events: none` on the 
            visuals, and rely on the shape of the ancestor element. in other 
            cases, we may want to use `pointer-events: none` on the ancestor 
            element and use a second pseudo-element to define the hit area.
         */
         &::before {
            pointer-events: none;
            content: " ";
            display: block;
            
            position: absolute;
            
            background-repeat: no-repeat;
         }
      }
      button.play-pause {
         left:   166px;
         top:    1px;
         width:  0px;
         height: 0px;
         font-size: 0px !important;
         
         &::after {
            content: " ";
            display: block;
            position: absolute;
            left:   0;
            top:    0;
            width:  100px;
            height: 100px;
            clip-path: ellipse(43px 43px at center center);
         }
         
         &::before {
            width:  100px;
            height: 100px;
            
            left: 0px;
            top:  0px;
            
            background-image: url(play-pause.svg);
            background-size: 100px 100px;
         }
         
         &:hover::before {
            background-image: url(play-pause.svg#play-hover) !important;
         }
         &:active::before {
            background-image: url(play-pause.svg#play-active) !important;
         }
         &:is([disabled], :disabled)::before {
            background-image: url(play-pause.svg#play-disabled) !important;
         }
      }
      button.stop {
         left:   5px;
         top:    26px;
         width:  48px;
         height: 48px;
         
         /*
            use a pseudo-element for the actual visuals so that we can control 
            the clickable hitbox via pointer-events and friends
         */
         &::before {
            pointer-events: none;
            width:   58px;
            height:  58px;
            
            left: -5px;
            top:   0px;
            
            background-image: url(stop.svg);
            background-size:  58px 58px;
         }
         &:hover::before {
            background-image: url(stop.svg#hover) !important;
         }
         &:active::before {
            background-image: url(stop.svg#active) !important;
         }
         &:is([disabled], :disabled)::before {
            background-image: url(stop.svg#disabled) !important;
         }
      }
   }
}

.disable-alpha {
   filter: url(#filter-disable-alpha);
}