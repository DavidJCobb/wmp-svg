
:host {
   display: inline-block;
   width:   min-content;
   height:  min-content;
   user-select: none;
   pointer-events: none;
}
:host > div {
   position:    relative;
   user-select: none;
}
.hitbox {
   pointer-events: auto;
}

.graphic,
.glyph {
   pointer-events: none;
   
   position: absolute;
   left:     calc(var(--sprite-x) * var(--effective-scale));
   top:      calc(var(--sprite-y) * var(--effective-scale));
   
   display:  block;
   width:    var(--effective-width);
   height:   var(--effective-height);
   
   background:
      var(--spritesheet)
      /*pos-x*/ calc(-1 * var(--current-sprite-col) * var(--effective-width))
      /*pos-y*/ calc(-1 * var(--current-sprite-row) * var(--effective-height))
      /
      /*width*/  calc(var(--spritesheet-cols) * var(--effective-width))
      /*height*/ calc(var(--spritesheet-rows) * var(--effective-height))
      no-repeat
   ;
   
   /*
      COMMON SPRITESHEET VARS: REQUIRED INPUTS:
      
      --spritesheet
         url() of the spritesheet file. If it's an SVG, its width and 
         height attributes must be set to the total size of the entire 
         sheet.
         
      --spritesheet-rows
         Number of rows in the spritesheet.
         
      --spritesheet-cols
         Number of columns in the spirtesheet.
         
      --sprite-width
         Width of each sprite, in pixels, matching the SVG units.
         
      --sprite-height
         Height of each sprite, in pixels, matching the SVG units.
   */
   
   /* COMMON SPRITESHEET VARS: INPUTS WITH DEFAULTS */
   --sprite-scale: 1;   /* scale at which the sprites were designed */
   --sprite-x:     0px; /* horizontal offset relative to the hitbox */
   --sprite-y:     0px; /* vertical offset relative to the hitbox */
   
   /* COMMON SPRITESHEET VARS: COMPUTED */
   --effective-scale:  calc(var(--scale,1) / var(--sprite-scale,1));
   --effective-width:  calc(var(--sprite-width) * var(--effective-scale));
   --effective-height: calc(var(--sprite-height) * var(--effective-scale));
}

.graphic {
   /* INPUTS: */
   --sprite-count: 4;
   
   /* HELPERS: */
   --sprite-index-normal:   0;
   --sprite-index-hover:    1;
   --sprite-index-active:   2;
   --sprite-index-disabled: 3;
   
   --spritesheet-rows: 1;
   --spritesheet-cols: var(--sprite-count);
   --current-sprite-row: 0;
   --current-sprite-col: var(--current-sprite);
   
   /* DEFAULTS: */
   --current-sprite: var(--sprite-index-normal);
}
.hitbox:hover ~ .graphic {
   --current-sprite: var(--sprite-index-hover);
}
.hitbox:active ~ .graphic {
   --current-sprite: var(--sprite-index-active);
}
:host(:disabled) .graphic {
   --current-sprite: var(--sprite-index-disabled);
}
.glyph {
   /* DEFAULTS: */
   --current-sprite-row: 0;
   --current-sprite-col: 0;
}

/* END OF SPRITESHEET STYLES */

/*
   FOCUS HELPER
   
   If the `.hitbox` uses a `clip-path`, then that will affect (i.e. clip) 
   the browser's native focus ring. Fortunately, Firefox and Chrome/WebKit 
   all offer non-standard ways to force native focus ring styles on an 
   arbitrary element.
*/
:host>div {
   .hitbox {
      outline: none;
   }
}
/* In Firefox, :host>div:has(:focus-visible) never matches as of this writing,
   whether nested or not. We'll use this to select the wrapper DIV instead. */
div:first-of-type:last-of-type:has(:focus-visible) {
   outline: medium auto #000;
   outline: medium auto highlight; /* Firefox */
   outline: medium auto -webkit-focus-ring-color; /* Chromium, WebKit */
}

/*
   BASIC BUTTON
   
   A square button whose glassy frame only appears on hover or activation.
*/
:host > div:not(
   [data-command="play"],
   [data-command="pause"],
   [data-command="prev"],
   [data-command="next"],
   [data-command="rewind"],
   [data-command="fast-forward"]
) {
   .hitbox {
      width:  calc(23px * var(--scale,1));
      height: calc(23px * var(--scale,1));
   }
   .graphic {
      --spritesheet: url(spritesheet-generic.svg);
      --sprite-width:  58px;
      --sprite-height: 60px;
      --sprite-scale:  2; /* the button sprites were authored at 2x scale */
      
      --sprite-x: -8px;
      --sprite-y: -4px;
   }
   .glyph {
      --spritesheet:      url(spritesheet-glyphs-general.svg);
      --spritesheet-rows: 4;
      --spritesheet-cols: 5;
      
      --sprite-width:  50px;
      --sprite-height: 50px;
      --sprite-scale:  2; /* the glyph sprites were authored at 2x scale */
      
      --sprite-x: -1.5px;
      --sprite-y: -2px;
   
      /* what rows represent what glyphs */
      --glyph-row-loop:    0;
      --glyph-row-shuffle: 1;
      --glyph-row-stop:    2;
      --glyph-row-volume:  3;
      
      /* what columns represent what variants */
      --glyph-col-off:      0;
      --glyph-col-on:       1;
      --glyph-col-enabled:  0;
      --glyph-col-disabled: 1;
   }
   
   /* show white glyphs when controls are overlaid on the playing media */
   &:host-context(wm-player[data-overlay-controls]) {
      .glyph {
         --spritesheet: url(spritesheet-glyphs-general.svg#theater);
      }
   }
   
   /* Toggle-button glyphs. */
   :host([type="toggle"]) & .glyph {
      --current-sprite-col: var(--glyph-col-off);
   }
   :host([type="toggle"][checked]) & .glyph {
      --current-sprite-col: var(--glyph-col-on);
   }
   
   /* Action-button glyphs. */
   :host([type="action"]) & .glyph {
      --current-sprite-col: var(--glyph-col-enabled);
   }
   :host([type="action"]:disabled) & .glyph {
      --current-sprite-col: var(--glyph-col-disabled);
   }
   
   /* Icons. */
   &[data-command="loop"] .glyph {
      --current-sprite-row: var(--glyph-row-loop);
   }
   &[data-command="mute"] .glyph {
      --current-sprite-row: var(--glyph-row-volume);
      
      :host([data-glyph-variant="empty"]) & {
         --current-sprite-col: 0;
      }
      :host([data-glyph-variant="low"]) & {
         --current-sprite-col: 1;
      }
      :host([data-glyph-variant="medium"]) & {
         --current-sprite-col: 2;
      }
      :host([data-glyph-variant="high"]) & {
         --current-sprite-col: 3;
      }
      :host([checked]) & {
         --current-sprite-col: 4;
      }
   }
   &[data-command="shuffle"] .glyph {
      --current-sprite-row: var(--glyph-row-shuffle);
   }
   &[data-command="stop"] .glyph {
      --current-sprite-row: var(--glyph-row-stop);
   }
}

/*
   PLAY/PAUSE BUTTON
*/
div:is(
   [data-command="play"],
   [data-command="pause"]
) {
   .hitbox {
      --diameter: calc(43px * var(--scale,1));
      --radius:   calc(var(--diameter) / 2);
      
      width:     var(--diameter);
      height:    var(--diameter);
      clip-path: ellipse(var(--radius) var(--radius) at center center);
   }
   .graphic {
      --spritesheet:   url(spritesheet-jewel.svg);;
      --sprite-width:  100px;
      --sprite-height: 100px;
      --sprite-scale:  2;
      
      --sprite-x: -7px;
      --sprite-y: -7.5px;
   }
   .glyph {
      --spritesheet:      url(spritesheet-glyphs-play-pause.svg);
      --spritesheet-rows: 1;
      --spritesheet-cols: 2;
      
      --sprite-width:  100px;
      --sprite-height: 100px;
      --sprite-scale:  2;
      
      --sprite-x: -7px;
      --sprite-y: -7px;
   }
}
div[data-command="play"] .glyph {
   --current-sprite-col: 0;
}
div[data-command="pause"] .glyph {
   --current-sprite-col: 1;
}

/*
   NEXT/FAST-FORWARD/PREV/REWIND BUTTON
*/
div:is(
   [data-command="next"],
   [data-command="prev"],
   [data-command="fast-forward"],
   [data-command="rewind"]
) {
   .hitbox {
      width:  calc(48px * var(--scale, 1));
      height: calc(23px * var(--scale, 1));
      
      /* so we don't need a million calc()s in the clip-path, set 
         the font-size */
      font-size: calc(1px * var(--scale, 1));
      clip-path: polygon(
          1em    0em,
         40.5em  0em,
         44.2em  1em,
         46.2em  3em,
         47.1em  5em,
         47.5em  7em,
         48em   11.5em,
         47.5em 16em,
         47.1em 18em,
         46.2em 20em,
         44.2em 22em,
         40.5em 23em,
          1em   23em,
          0em   22em,
          1em   19em,
          2em   14em,
          2em   11.5em,
          2em    9em,
          1em    4em,
          0em    1em
      );
   }
   .graphic {
      --spritesheet:   url(spritesheet-next.svg);
      --sprite-width:  112px;
      --sprite-height:  70px;
      --sprite-scale:      2;
      
      --sprite-x:  -5px;
      --sprite-y: -12px;
   }
   .glyph {
      --spritesheet:      url(spritesheet-glyphs-next.svg);
      --spritesheet-rows: 2;
      --spritesheet-cols: 2;
      
      --sprite-width:  112px;
      --sprite-height:  70px;
      --sprite-scale:      2;
      
      --sprite-x:  -3px;
      --sprite-y: -12px;
      
      --current-sprite-row: var(--glyph-row-primary);
      --current-sprite-col: var(--glyph-col-enabled);
      
      /* what rows represent what glyphs */
      --glyph-row-primary:   1;
      --glyph-row-secondary: 0;
      
      /* what columns represent what variants */
      --glyph-col-enabled:  0;
      --glyph-col-disabled: 1;
   }
   
   :host(:disabled) & .glyph {
      --current-sprite-col: var(--glyph-col-disabled);
   }
   
   :host-context(wm-player[data-overlay-controls]) & .glyph {
      --spritesheet: url(spritesheet-glyphs-next.svg#theater);
   }
}
div:is(
   [data-command="fast-forward"],
   [data-command="rewind"]
) .glyph {
   --current-sprite-row: var(--glyph-row-secondary);
}
div:is(
   [data-command="prev"],
   [data-command="rewind"]
) {
   transform-box:    content-box;
   transform-origin: center center;
   transform:        scale(-100%, 100%);
}